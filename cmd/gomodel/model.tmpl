{{range $model, $fields := .}}
{{$normalModel := $model.Name}}
{{$unexport := $model.UnexportedName}}
{{$upperModel := $model.UpperName}}
{{$self := $model.Self}}
{{$recv := (printf "(%s *%s)" $self $normalModel)}}
const (
    {{range $index, $field := $fields}}{{with $field}}{{.ConstName}}{{end}} {{if eq $index  0}} uint = 1 << iota {{end}}
    {{end}}{{$unexport}}FieldEnd = iota
    {{$unexport}}FieldsAll = 1 << {{$unexport}}FieldEnd-1
    {{range $index, $field := $fields}}{{with $field}}{{$unexport}}FieldsExcp{{.Name}} = {{$unexport}}FieldsAll &(^{{.ConstName}}){{end}}
    {{end}}
)
var (
    // DB is the global DB instance
    {{$unexport}}Info = DB.TypeInfo(&{{$normalModel}}{})
)

func {{$recv}} Table() string {
    return "{{$model.TableName}}"
}

func {{$recv}} Vals(fields uint, vals []interface{}) {
    if fields != 0 {
    if fields == {{$unexport}}FieldsAll {
        {{range $index, $field:=$fields}}vals[{{$index}}]={{$self}}.{{$field.Name}}
        {{end}}
    } else {
       index := 0
    {{range $fields}} if fields&{{.ConstName}} != 0 {
        vals[index] = {{$self}}.{{.Name}}
        index++
        }
    {{end}}  }
    }
}

func {{$recv}} Ptrs(fields uint, ptrs []interface{}) {
    if fields != 0 {
        if fields == {{$unexport}}FieldsAll {
        {{range $index, $field:=$fields}}ptrs[{{$index}}]=&({{$self}}.{{$field.Name}})
        {{end}}
         } else {
        index := 0
        {{range $fields}} if fields&{{.ConstName}} != 0 {
            ptrs[index] = &({{$self}}.{{.Name}})
            index++
        }
    {{end}}}
    }
}

type (
    {{$unexport}}s struct {
        Values []{{$normalModel}}
        Fields uint
    }
)

func (a *{{$unexport}}s) Make(count int) {
    if a.Values == nil {
        a.Values = make([]{{$normalModel}}, count)
    } else {
        a.Values = a.Values[:count]
    }
}

func (a *{{$unexport}}s) Ptrs(index int, ptrs []interface{}) bool {
    if len := len(a.Values); index == len {
        values := make([]{{$normalModel}}, 2 * len)
        copy(values, a.Values)
        a.Values = values
    }

    a.Values[index].Ptrs(a.Fields, ptrs)
    return true
}
{{end}}
